generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id             String        @id @default(uuid())
  name           String
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  sizes          Size[]        @relation("StoreToSize")
  brand          Brand[]       @relation("StoreToBrand")
  colours        Colour[]      @relation("StoreToColour")
  billboards     Billboard[]   @relation("StoreToBillboard")
  categories     Category[]    @relation("StoreToCategory")
  sub_categories SubCategory[] @relation("StoreToSubCategory")
  styles         Style[]       @relation("StoreToStyle")
  products       Product[]     @relation("StoreToProduct")
  order          Order[]       @relation("StoreToOrder")
  modal          Modal[]       @relation("StoreToModal")
}

model Billboard {
  id         String     @id @default(uuid())
  store_id   String
  label      String
  image_url  String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [store_id], references: [id])
  categories Category[]

  @@index([store_id])
}

model Category {
  id             String        @id @default(uuid())
  store_id       String
  billboard_id   String
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  store          Store         @relation("StoreToCategory", fields: [store_id], references: [id])
  billboard      Billboard     @relation(fields: [billboard_id], references: [id])
  products       Product[]     @relation("CategoryToProduct")
  sub_categories SubCategory[] @relation("CategoryToSubCategory")

  @@index([store_id])
  @@index([billboard_id])
}

model SubCategory {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  store_id    String
  category_id String
  category    Category  @relation("CategoryToSubCategory", fields: [category_id], references: [id])
  store       Store     @relation("StoreToSubCategory", fields: [store_id], references: [id])
  products    Product[] @relation("SubCategoryToProduct")
  styles      Style[]   @relation("SubCategoryToStyle")

  @@index([store_id])
  @@index([category_id])
}

model Style {
  id             String      @id @default(uuid())
  name           String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  store_id       String
  subcategory_id String
  subcategory    SubCategory @relation("SubCategoryToStyle", fields: [subcategory_id], references: [id])
  store          Store       @relation("StoreToStyle", fields: [store_id], references: [id])
  products       Product[]   @relation("StyleToProduct")

  @@index([subcategory_id])
  @@index([store_id])
}

model Modal {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  isPublished          Boolean  @default(false)
  store_id             String
  link                 String
  name                 String
  location             String
  image_url            String
  description          String
  terms_and_conditions String
  title                String
  isImagePublished     Boolean  @default(false)
  store                Store    @relation("StoreToModal", fields: [store_id], references: [id])

  @@index([store_id])
}

model Size {
  id            String        @id @default(uuid())
  store_id      String
  name          String
  value         String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  store         Store         @relation("StoreToSize", fields: [store_id], references: [id])
  products      Product[]
  product_sizes ProductSize[]

  @@index([store_id])
}

model ProductSize {
  id         String   @id @default(uuid())
  product_id String
  size_id    String
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  size       Size     @relation(fields: [size_id], references: [id])

  @@index([product_id])
  @@index([size_id])
}

model Brand {
  id        String    @id @default(uuid())
  store_id  String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToBrand", fields: [store_id], references: [id])
  products  Product[]

  @@index([store_id])
}

model Colour {
  id        String    @id @default(uuid())
  store_id  String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToColour", fields: [store_id], references: [id])
  products  Product[]

  @@index([store_id])
}

model Product {
  id             String        @id @default(uuid())
  store_id       String
  category_id    String
  subcategory_id String
  style_id       String
  size_id        String
  colour_id      String
  brand_id       String
  name           String
  price          Decimal
  is_featured    Boolean       @default(false)
  is_archived    Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  is_discounted  Boolean       @default(false)
  discount_rate  Decimal
  product_size   ProductSize[]
  store          Store         @relation("StoreToProduct", fields: [store_id], references: [id])
  category       Category      @relation("CategoryToProduct", fields: [category_id], references: [id])
  subCategory    SubCategory   @relation("SubCategoryToProduct", fields: [subcategory_id], references: [id])
  style          Style         @relation("StyleToProduct", fields: [style_id], references: [id])
  size           Size          @relation(fields: [size_id], references: [id])
  colour         Colour        @relation(fields: [colour_id], references: [id])
  brand          Brand         @relation(fields: [brand_id], references: [id])
  images         Image[]
  orderItems     OrderItem[]

  @@unique([subcategory_id, colour_id, name])
  @@index([store_id])
  @@index([category_id])
  @@index([subcategory_id])
  @@index([style_id])
  @@index([colour_id])
  @@index([brand_id])
  @@index([size_id])
}

model Image {
  id         String   @id @default(uuid())
  product_id String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
}

model Order {
  id         String      @id @default(uuid())
  store_id   String
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  store      Store       @relation("StoreToOrder", fields: [store_id], references: [id])
  orderItems OrderItem[]

  @@index([store_id])
}

model OrderItem {
  id         String  @id @default(uuid())
  order_id   String
  product_id String
  order      Order   @relation(fields: [order_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])

  @@index([order_id])
  @@index([product_id])
}
