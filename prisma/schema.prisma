generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String        @id @default(uuid())
  name            String
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  sizes           Size[]        @relation("StoreToSize")
  brand           Brand[]       @relation("StoreToBrand")
  colours         Colour[]      @relation("StoreToColour")
  billboards      Billboard[]   @relation("StoreToBillboard")
  categories      Category[]    @relation("StoreToCategory")
  subCategories   SubCategory[] @relation("StoreToSubCategory")
  styles          Style[]       @relation("StoreToStyle")
  products        Product[]     @relation("StoreToProduct")
  order           Order[]       @relation("StoreToOrder")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id            String        @id @default(uuid())
  storeId       String
  billboardId   String
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  store         Store         @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard     Billboard     @relation(fields: [billboardId], references: [id])
  products      Product[]     @relation("CategoryToProduct")
  subCategories SubCategory[] @relation("CategoryToSubCategory")

  @@index([storeId])
  @@index([billboardId])
}

model SubCategory {
  id            String        @id @default(uuid())
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  category      Category      @relation("CategoryToSubCategory", fields: [categoryId], references: [id])    
  store         Store         @relation("StoreToSubCategory", fields: [storeId], references: [id])
  products      Product[]     @relation("SubCategoryToProduct")
  storeId       String
  categoryId    String
  styles        Style[]    

  @@index([storeId])
  @@index([categoryId])
}

model Style {
  id            String @id @default(uuid())
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategoryId String
  subCategory   SubCategory[] 
  store         Store         @relation("StoreToStyle", fields: [storeId], references: [id])
  products      Product[]     @relation("StyleToProduct")
  storeId       String

  @@index([subCategoryId])
  @@index([storeId])
  
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Brand {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Colour {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToColour", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Product {
  id            String       @id @default(uuid())
  storeId       String
  categoryId    String
  subCategoryId String
  styleId       String
  sizeId        String
  colourId      String
  brandId       String
  name          String
  price         Decimal
  isFeatured    Boolean      @default(false)
  isArchived    Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isDiscounted  Boolean      @default(false)
  discountRate  Decimal
  store         Store        @relation("StoreToProduct", fields: [storeId], references: [id])
  category      Category     @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subCategory   SubCategory  @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id])
  style         Style        @relation("StyleToProduct", fields: [styleId], references: [id])
  size          Size         @relation(fields: [sizeId], references: [id])
  colour        Colour       @relation(fields: [colourId], references: [id])
  brand         Brand        @relation(fields: [brandId], references: [id])
  images        Image[]
  orderItems    OrderItem[]

  @@unique([subCategoryId, colourId, name])
  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([styleId])
  @@index([colourId])
  @@index([brandId])
  @@index([sizeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
